**COSAS POR HACER (actualizado 2025-05-19)**

# Prioridades
- [ALTA] = Crítico para funcionamiento, seguridad o experiencia de usuario
- [MEDIA] = Importante para usabilidad, robustez o escalabilidad
- [BAJA] = Mejora visual, refactor, optimización o documentación

# Estado de tests por módulo (2025-05-19)
- inventario: OK (tests unitarios e integración pasan; edge cases cubiertos)
- logistica: OK (tests unitarios e integración pasan)
- mantenimiento: OK (tests unitarios e integración pasan)
- usuarios: OK (headers dinámicos implementados)
- compras: OK
- configuracion: OK
- auditoria: OK
- auditoria_integracion: OK
- obras: OK (headers dinámicos implementados, tests integración y unitarios pasan, auditoría y flujos validados)

# Próximos pasos:

# NOTA: Cuando completes un punto, márcalo como [x] y elimina los resueltos en la próxima actualización.

Actualiza este archivo a medida que completes tareas o surjan nuevas necesidades.

# Checklist de mejoras y recordatorios pendientes (según README y SAP-like):

- [x] Validar que todas las tablas principales obtienen headers dinámicamente desde la base de datos (sin hardcode).
- [x] Implementar menú contextual para mostrar/ocultar columnas en todas las QTableWidget.
- [x] Verificar que todos los módulos usan el mixin TableResponsiveMixin para tablas responsive.
- [x] Revisar que cada acción relevante (alta, edición, eliminación, exportación, reserva, entrega, cambio de estado) queda registrada en auditoría. (Mantenimiento: decorador aplicado y documentado; patrón de auditoría documentado en README y docstring)
- [x] Validar que los permisos y visibilidad de módulos se cargan dinámicamente según el usuario (sidebar y QStackedWidget).
- [x] Implementar y testear el flujo de solicitudes de aprobación para usuarios sin permiso de modificación (tabla solicitudes_aprobacion).
- [x] Revisar feedback visual en todas las acciones (mensajes de éxito, error, advertencia, permiso denegado).
- [x] Validar que todos los modelos usan los nombres exactos de tablas según README y License. (Auditoría completada, sin discrepancias)
- [x] Exportación robusta de usuarios (Excel/PDF, feedback, validación, nombres únicos, docstring, permisos/auditoría) implementada en UsuariosModel y UsuariosController.
- [ ] Exportación de logs de usuarios (opcional, pendiente si se requiere).

# Mejoras técnicas sugeridas:
- [ALTA] Unificar y documentar el uso de la clase BaseDatabaseConnection en todos los módulos (evitar conexiones duplicadas). Todos los modelos principales ahora documentan el patrón correcto y no crean conexiones internas duplicadas.
- [MEDIA] Revisar que todos los formularios validan correctamente antes de insertar/actualizar datos.
- [ALTA] Implementar manejo de errores global para caídas de conexión a la base de datos (mostrar aviso, no crashear la app). Ahora todos los métodos de conexión muestran un mensaje visual y no detienen la app ante errores de conexión o consulta.
- [ALTA] Revisar que todos los módulos registran acciones relevantes en auditoría (decorador o función centralizada). (Mantenimiento: completado y documentado)
- [MEDIA] Verificar que la exportación a Excel y PDF respeta filtros y columnas visibles.
- [MEDIA] Revisar que la interfaz visual cumple con los lineamientos de bordes redondeados, botones con sombra y soporte de tema claro/oscuro en todos los widgets.
- [MEDIA] Validar que la app puede iniciar y funcionar en modo offline (sin DB), mostrando advertencia y permitiendo navegación básica.
- [MEDIA] Documentar y testear el flujo de Kanban en obras (cronograma y avance visual).
- [ALTA] Revisar que los tests unitarios y de integración cubren los flujos críticos de cada módulo.

# Pendientes de documentación:
- [MEDIA] Actualizar README y License si se agregan nuevas tablas o módulos.
- [MEDIA] Documentar en README el flujo de aprobación de solicitudes y su relación con la tabla solicitudes_aprobacion.
- [BAJA] Incluir ejemplos de configuración en config.example.py y advertir sobre la exclusión de config.py real.

# Revisiones de buenas prácticas:
- [ALTA] Validar que no se suben archivos sensibles (config.py, credenciales) al repositorio.

# Mejoras específicas detectadas (ejemplo ProduccionView)
- [ALTA] Corregir el import con espacio extra en matplotlib.backends.backend_qt5agg (línea 11).
- [MEDIA] Validar persistencia de configuración de columnas en tablas (manejo de archivos JSON, errores de lectura/escritura).
- [MEDIA] Mejorar el feedback visual al agregar/finalizar etapas (mensajes, colores, animaciones).
- [BAJA] Unificar estilos de botones y efectos de sombra en ProduccionView.
- [BAJA] Revisar y limpiar imports no usados en ProduccionView.

# --- PROBLEMAS DETECTADOS (AGREGADOS AUTOMÁTICAMENTE) ---
# [ALTA] main.py: La instalación de dependencias usaba --user siempre, lo que puede fallar en entornos virtuales. Corregido para que solo se use fuera de venv.
# [ALTA] mps/ui/main_window.py: Problemas de imports relativos y rutas inconsistentes. Revisar y unificar imports para evitar errores de importación cruzada y duplicada.
# [MEDIA] widgets/sidebar.py: Revisar consistencia de iconos y rutas, y asegurar que los módulos Sidebar y SidebarButton no generen duplicidad/confusión en la UI.
# [MEDIA] widgets/sidebar.py: Mejorar robustez de la lógica de visibilidad dinámica y feedback visual de estado online/offline.
# [MEDIA] widgets/sidebar.py: Validar que los iconos SVG existan y fallback a un icono por defecto si no existen.
# [MEDIA] widgets/sidebar.py: Documentar el patrón de uso de Sidebar y SidebarButton en el README.
# [MEDIA] mps/ui/main_window.py: Validar que la persistencia de módulo activo y recarga de tema funcione correctamente en todos los flujos de login/cambio de usuario.
# [MEDIA] mps/ui/main_window.py: Documentar en cosas por hacer la necesidad de unificar la gestión de permisos y visibilidad de módulos entre main.py y main_window.py.

---

## ¿Cómo priorizar?
- Empieza siempre por los puntos [ALTA].
- Los puntos [MEDIA] mejoran la experiencia y la mantenibilidad.
- Los puntos [BAJA] son mejoras visuales, refactors o documentación.

---

Actualiza este archivo cada vez que resuelvas un punto o detectes uno nuevo.

- [ALTA] Corregir robustez de instalación de dependencias en main.py: usar --user solo fuera de venv (hecho).
- [ALTA] Corregir imports y argumentos obligatorios en Sidebar y main_window.py: pasar icons_path y sections, eliminar métodos inexistentes (hecho).
- [MEDIA] Implementar feedback visual de selección activa en Sidebar (actualmente no hay indicación visual del módulo activo).
- [MEDIA] Mejorar documentación de la API pública de Sidebar (qué métodos y señales expone, cómo se usa correctamente).
- [MEDIA] Unificar la lógica de visibilidad dinámica de módulos entre Sidebar y QStackedWidget (actualmente solo oculta widgets en el stack).
- [ALTA] Corregir imports y estructura de rutas en main_window.py y otros módulos UI (evitar imports rotos o redundantes).
- [ALTA] Crear o restaurar el componente TopBar, o reemplazarlo por un header alternativo en main_window.py.

# NOTA: Migración de Sidebar a componente unificado
- [ALTA] Modularización Sidebar: migrado a mps/ui/components/sidebar.py, imports unificados y lógica avanzada fusionada. No usar widgets/sidebar.py (ImportError).
- [ALTA] Corregir y auditar imports de Sidebar en toda la app (completado).
- [ALTA] Documentar en README y en docstring de Sidebar la nueva ruta y uso recomendado.