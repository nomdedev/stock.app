**COSAS POR HACER (actualizado 2025-05-19)**

# Prioridades
- [ALTA] = Crítico para funcionamiento, seguridad o experiencia de usuario
- [MEDIA] = Importante para usabilidad, robustez o escalabilidad
- [BAJA] = Mejora visual, refactor, optimización o documentación

# Estado de tests por módulo (2025-05-19)
- inventario: OK (tests unitarios e integración pasan; edge cases cubiertos)
- logistica: OK (tests unitarios e integración pasan)
- mantenimiento: OK (tests unitarios e integración pasan)
- usuarios: OK (headers dinámicos implementados)
- compras: OK
- configuracion: OK
- auditoria: OK
- auditoria_integracion: OK
- obras: OK (headers dinámicos implementados, tests integración y unitarios pasan, auditoría y flujos validados)

# Próximos pasos:

# NOTA: Cuando completes un punto, márcalo como [x] y elimina los resueltos en la próxima actualización.

Actualiza este archivo a medida que completes tareas o surjan nuevas necesidades.

# Checklist de mejoras y recordatorios pendientes (según README y SAP-like):

- [x] Validar que todas las tablas principales obtienen headers dinámicamente desde la base de datos (sin hardcode).
- [x] Implementar menú contextual para mostrar/ocultar columnas en todas las QTableWidget.
- [x] Verificar que todos los módulos usan el mixin TableResponsiveMixin para tablas responsive.
- [x] Revisar que cada acción relevante (alta, edición, eliminación, exportación, reserva, entrega, cambio de estado) queda registrada en auditoría. (Mantenimiento: decorador aplicado y documentado; patrón de auditoría documentado en README y docstring)
- [x] Validar que los permisos y visibilidad de módulos se cargan dinámicamente según el usuario (sidebar y QStackedWidget).
- [x] Implementar y testear el flujo de solicitudes de aprobación para usuarios sin permiso de modificación (tabla solicitudes_aprobacion).
- [x] Revisar feedback visual en todas las acciones (mensajes de éxito, error, advertencia, permiso denegado).
- [x] Validar que todos los modelos usan los nombres exactos de tablas según README y License. (Auditoría completada, sin discrepancias)
- [x] Exportación robusta de usuarios (Excel/PDF, feedback, validación, nombres únicos, docstring, permisos/auditoría) implementada en UsuariosModel y UsuariosController.
- [x] Exportación de logs de usuarios (opcional, pendiente si se requiere). Ahora implementada: método robusto en UsuariosModel y UsuariosController, feedback validado, nombres únicos, soporte Excel/PDF.

# Mejoras técnicas sugeridas:
- [ALTA] Unificar y documentar el usoVa de la clase BaseDatabaseConnection en todos los módulos (evitar conexiones duplicadas). Todos los modelos principales ahora documentan el patrón correcto y no crean conexiones internas duplicadas.
- [MEDIA] Revisar que todos los formularios validan correctamente antes de insertar/actualizar datos.
- [ALTA] Implementar manejo de errores global para caídas de conexión a la base de datos (mostrar aviso, no crashear la app). Ahora todos los métodos de conexión muestran un mensaje visual y no detienen la app ante errores de conexión o consulta.
- [ALTA] Revisar que todos los módulos registran acciones relevantes en auditoría (decorador o función centralizada). (Mantenimiento: completado y documentado)
- [MEDIA] Verificar que la exportación a Excel y PDF respeta filtros y columnas visibles.
- [MEDIA] Revisar que la interfaz visual cumple con los lineamientos de bordes redondeados, botones con sombra y soporte de tema claro/oscuro en todos los widgets.
- [MEDIA] Validar que la app puede iniciar y funcionar en modo offline (sin DB), mostrando advertencia y permitiendo navegación básica.
- [MEDIA] Documentar y testear el flujo de Kanban en obras (cronograma y avance visual).
- [ALTA] Revisar que los tests unitarios y de integración cubren los flujos críticos de cada módulo.

# Pendientes de documentación:
- [MEDIA] Actualizar README y License si se agregan nuevas tablas o módulos.
- [MEDIA] Documentar en README el flujo de aprobación de solicitudes y su relación con la tabla solicitudes_aprobacion.
- [BAJA] Incluir ejemplos de configuración en config.example.py y advertir sobre la exclusión de config.py real.

# Revisiones de buenas prácticas:
- [ALTA] Validar que no se suben archivos sensibles (config.py, credenciales) al repositorio.

# Mejoras específicas detectadas (ejemplo ProduccionView)
- [ALTA] Corregir el import con espacio extra en matplotlib.backends.backend_qt5agg (línea 11).
- [MEDIA] Validar persistencia de configuración de columnas en tablas (manejo de archivos JSON, errores de lectura/escritura).
- [MEDIA] Mejorar el feedback visual al agregar/finalizar etapas (mensajes, colores, animaciones).
- [BAJA] Unificar estilos de botones y efectos de sombra en ProduccionView.
- [BAJA] Revisar y limpiar imports no usados en ProduccionView.

# --- PROBLEMAS DETECTADOS (AGREGADOS AUTOMÁTICAMENTE) ---
# [ALTA] main.py: La instalación de dependencias usaba --user siempre, lo que puede fallar en entornos virtuales. Corregido para que solo se use fuera de venv.
# [ALTA] mps/ui/main_window.py: Problemas de imports relativos y rutas inconsistentes. Revisar y unificar imports para evitar errores de importación cruzada y duplicada.
# [MEDIA] widgets/sidebar.py: Revisar consistencia de iconos y rutas, y asegurar que los módulos Sidebar y SidebarButton no generen duplicidad/confusión en la UI.
# [MEDIA] widgets/sidebar.py: Mejorar robustez de la lógica de visibilidad dinámica y feedback visual de estado online/offline.
# [MEDIA] widgets/sidebar.py: Validar que los iconos SVG existan y fallback a un icono por defecto si no existen.
# [MEDIA] widgets/sidebar.py: Documentar el patrón de uso de Sidebar y SidebarButton en el README.
# [MEDIA] mps/ui/main_window.py: Validar que la persistencia de módulo activo y recarga de tema funcione correctamente en todos los flujos de login/cambio de usuario.
# [MEDIA] mps/ui/main_window.py: Documentar en cosas por hacer la necesidad de unificar la gestión de permisos y visibilidad de módulos entre main.py y main_window.py.

---

# Checklist de estándares visuales y de interacción (Sidebar y app)

## Sidebar
- [x] Fondo blanco puro (#fff) ✔
- [x] Botones fondo crema (#F5F5DC) ✔
- [x] Borde sutil gris claro (#e0e7ef) ✔
- [x] Hover: fondo crema más claro (#f3f4f6), borde igual o apenas más oscuro ✔
- [x] Activo: borde 2px #e0e7ef, borde izquierdo 3px #2563eb, fondo crema ✔
- [x] Radio de borde 8px ✔
- [x] Padding 4px vertical, 10px horizontal ✔
- [x] Texto #1e293b, tamaño 12px, peso 500 ✔
- [x] Iconos SVG/PNG, tamaño 20x20, alineados a la izquierda ✔
- [x] Estado Online/Offline: colores y estilos correctos ✔
- [x] Espaciado entre botones 8px, márgenes internos 10/20/10 ✔
- [x] Contraste alto, fuente >=12px ✔
- [x] Feedback visual inmediato ✔
- [x] Código: estilos centralizados, documentado ✔

## Faltantes o a revisar (Sidebar)
- [x] Verificar que el texto de los botones esté alineado a la izquierda cuando sidebar está expandido (actualmente solo si mostrar_nombres=True, pero el setStyleSheet puede sobrescribirse). ✔
- [x] Revisar que el padding izquierdo de los iconos sea al menos 8px respecto al texto (puede requerir ajuste en el setStyleSheet o en la creación de botones). ✔
- [x] Confirmar que no haya ningún color saturado ni sombra en hover/activo (revisar posibles overrides en QSS global). ✔
- [ ] Revisar accesibilidad: foco visible, contraste, tamaño de fuente nunca menor a 12px.
- [ ] Documentar en el README o docs/estandares_visuales.md que el estándar del sidebar está en el propio archivo.

## General app
- [ ] Verificar que todas las tablas usen headers y fondo estándar, sin colores personalizados salvo justificación.
- [ ] Confirmar que todos los diálogos, botones y formularios cumplen los principios de padding, bordes, tipografía y colores definidos en main.py y docs/estandares_visuales.md.
- [ ] Revisar la animación y feedback visual del splash screen (debe ser visible, suave y no requerir interacción).
- [ ] Documentar cualquier excepción visual en el archivo correspondiente.

---

Este checklist debe revisarse y completarse antes de dar por finalizada la estandarización visual de la app.

---

## ¿Cómo priorizar?
- Empieza siempre por los puntos [ALTA].
- Los puntos [MEDIA] mejoran la experiencia y la mantenibilidad.
- Los puntos [BAJA] son mejoras visuales, refactors o documentación.

---

Actualiza este archivo cada vez que resuelvas un punto o detectes uno nuevo.

- [ALTA] Corregir robustez de instalación de dependencias en main.py: usar --user solo fuera de venv (hecho).
- [ALTA] Corregir imports y argumentos obligatorios en Sidebar y main_window.py: pasar icons_path y sections, eliminar métodos inexistentes (hecho).
- [MEDIA] Implementar feedback visual de selección activa en Sidebar (actualmente no hay indicación visual del módulo activo).
- [MEDIA] Mejorar documentación de la API pública de Sidebar (qué métodos y señales expone, cómo se usa correctamente).
- [MEDIA] Unificar la lógica de visibilidad dinámica de módulos entre Sidebar y QStackedWidget (actualmente solo oculta widgets en el stack).
- [ALTA] Corregir imports y estructura de rutas en main_window.py y otros módulos UI (evitar imports rotos o redundantes).
- [ALTA] Crear o restaurar el componente TopBar, o reemplazarlo por un header alternativo en main_window.py.

# NOTA: Migración de Sidebar a componente unificado
- [ALTA] Modularización Sidebar: migrado a mps/ui/components/sidebar.py, imports unificados y lógica avanzada fusionada. No usar widgets/sidebar.py (ImportError).
- [ALTA] Corregir y auditar imports de Sidebar en toda la app (completado).
- [ALTA] Documentar en README y en docstring de Sidebar la nueva ruta y uso recomendado.

# --- SUGERENCIAS DE MEJORA Y ROBUSTEZ (revisión 2025-05-22) ---

# Robustez y rendimiento
- [ALTA] Revisar y eliminar código duplicado en controladores y vistas (usar helpers y mixins donde sea posible).
- [ALTA] Validar que todos los imports sean absolutos y consistentes, sin rutas relativas rotas ni redundantes.
- [ALTA] Centralizar la gestión de errores y feedback visual usando el logger y helpers definidos en core/logger.py y docs/estandares_logging.md.
- [ALTA] Asegurar que toda excepción crítica se muestra al usuario y se registra en logs, nunca solo en consola.
- [MEDIA] Optimizar consultas a la base de datos: evitar lecturas innecesarias, usar paginación y filtros en tablas grandes.
- [MEDIA] Revisar el uso de QTableWidget/QTableView: preferir modelos de datos (QAbstractTableModel) para grandes volúmenes.
- [MEDIA] Validar persistencia de configuración de usuario (columnas, tema, idioma) y manejo robusto de archivos JSON.
- [MEDIA] Revisar y limpiar imports no usados en todos los módulos.
- [MEDIA] Revisar el uso de QGraphicsDropShadowEffect: solo en botones principales, nunca en tablas ni layouts.

# Visual y UI/UX
- [ALTA] Verificar que todos los widgets interactivos (botones, inputs, tablas) tengan foco visible y feedback de accesibilidad (outline, borde, color).
- [ALTA] Confirmar contraste alto en todos los textos e íconos según docs/estandares_visuales.md.
- [ALTA] Revisar que ningún texto tenga tamaño menor a 12px en tablas, botones y formularios.
- [ALTA] Validar que todos los botones de acción sean solo ícono, sin texto, salvo justificación documentada.
- [ALTA] Revisar que todos los tooltips sean claros y estén presentes en botones y campos clave.
- [MEDIA] Unificar el padding y márgenes en todos los layouts y diálogos según main.py y docs/estandares_visuales.md.
- [MEDIA] Revisar que todos los headers de tablas usen fondo celeste pastel y texto azul pastel, sin overrides locales.
- [MEDIA] Validar que los formularios usen bordes redondeados, padding y tipografía estándar.
- [MEDIA] Revisar que el splash screen tenga animación suave, feedback visual claro y no requiera interacción.
- [MEDIA] Documentar toda excepción visual en el código y en docs/estandares_visuales.md.
- [MEDIA] Revisar que todos los diálogos y banners de feedback usen colores y emojis según docs/estandares_feedback.md.

# Modularidad y buenas prácticas
- [ALTA] Validar que cada módulo tiene su propia clase de conexión a base de datos derivada de BaseDatabaseConnection.
- [ALTA] Revisar que la gestión de permisos y visibilidad de módulos sea centralizada y documentada.
- [MEDIA] Documentar en README y en cada módulo el uso correcto de helpers visuales y de feedback.
- [MEDIA] Revisar y testear la cobertura de tests unitarios y de integración en todos los flujos críticos.
- [MEDIA] Validar que no se suben archivos sensibles (config.py, credenciales) al repositorio.

# Accesibilidad y feedback
- [ALTA] No usar solo color para indicar estado: siempre acompañar con ícono o texto.
- [MEDIA] Revisar que todos los procesos largos tengan feedback visual de carga (spinner, barra, etc.).
- [MEDIA] Validar que los mensajes de error, éxito y advertencia sean breves, claros y con color adecuado.

# Documentación
- [MEDIA] Actualizar README y docs/estandares_visuales.md con cualquier excepción o ajuste visual detectado.
- [MEDIA] Documentar en cada módulo cualquier excepción a los estándares visuales o de feedback.

# --- FIN DE SUGERENCIAS DE MEJORA Y ROBUSTEZ ---

# --- PARÁMETROS OBLIGATORIOS PARA TESTS AUTOMÁTICOS ROBUSTOS (INVENTARIO Y APP) ---
# Todo test debe cumplir con estos parámetros para ser considerado robusto y profesional:
#
# 1. Nombrado claro y descriptivo:
#    - test_<funcionalidad>_<condición>_<resultado_esperado>
#    - Ejemplo: test_exportar_excel_tabla_vacia_muestra_error
#
# 2. Estructura AAA (Arrange-Act-Assert):
#    - Arrange: Preparar entorno, mocks, datos y dependencias.
#    - Act: Ejecutar la acción a testear.
#    - Assert: Verificar el resultado esperado (feedback visual, datos, señales, etc).
#
# 3. Mocking y aislamiento:
#    - Simular dependencias externas (DB, archivos, señales, red, etc) para aislar el test.
#    - Usar unittest.mock, pytest-mock o fixtures según corresponda.
#
# 4. Validación de feedback visual y accesibilidad:
#    - Comprobar que QMessageBox, QLabel, QProgressDialog, tooltips y headers visuales se muestran/cambian correctamente.
#    - Verificar foco visible, contraste, tamaño de fuente >=12px, tooltips presentes y claros.
#
# 5. Edge cases y errores:
#    - Incluir casos límite: tabla vacía, error de conexión, rutas inválidas, permisos insuficientes, archivo JSON corrupto, etc.
#    - Verificar que la app no crashee y muestre feedback visual adecuado.
#
# 6. Limpieza y restauración:
#    - Restaurar estado tras cada test (archivos, configs, mocks, base de datos temporal, etc).
#    - Usar fixtures de setup/teardown o context managers.
#
# 7. Documentación y claridad:
#    - Cada test debe tener un docstring breve explicando el objetivo y el porqué del caso probado.
#    - Ejemplo:
#      def test_exportar_excel_tabla_vacia_muestra_error(self):
#          """Debe mostrar feedback de error si se intenta exportar una tabla vacía a Excel."""
#
# 8. Cobertura y exhaustividad:
#    - Asegurar que cada flujo crítico y excepción visual está cubierto.
#    - Validar señales emitidas, feedback visual, persistencia de configuración, accesibilidad y robustez.
#
# 9. Independencia de datos reales:
#    - Usar datos simulados o temporales, nunca depender de datos reales o productivos.
#
# 10. Validar señales y side effects:
#     - Comprobar que las señales se emiten correctamente y sólo cuando corresponde.
#     - Verificar side effects en la UI y en la base de datos simulada.
#
# 11. Visuales y estilos:
#     - Verificar estilos, tooltips y headers visuales según docs/estandares_visuales.md.
#     - Validar que no haya overrides locales no justificados.
#
# 12. Accesibilidad:
#     - Verificar tooltips y feedback accesible en todos los widgets interactivos.
#     - Validar foco visible y contraste suficiente.
#
# 13. Limpieza de recursos:
#     - Cerrar archivos, eliminar temporales y restaurar mocks tras cada test.
#
# 14. Ejemplo de test robusto:
#     def test_exportar_excel_tabla_vacia_muestra_error(self):
#         """Debe mostrar feedback de error si se intenta exportar una tabla vacía a Excel."""
#         # Arrange
#         ...
#         # Act
#         ...
#         # Assert
#         ...
#
# Para cada test del checklist, seguir estos parámetros y actualizar el estado en este archivo.
# Si un test no cumple con estos puntos, debe ser refactorizado o ampliado.
#
# Documentar en el código y en docs/estandares_visuales.md cualquier excepción visual o lógica detectada durante los tests.
#
# --- FIN DE PARÁMETROS OBLIGATORIOS PARA TESTS ROBUSTOS ---

# Checklist de tests automáticos pendientes para el módulo de inventario (view.py)

## 1. Carga y visualización de datos
- [ ] Test: Cargar items en la tabla y verificar que se muestran correctamente todos los campos.
- [ ] Test: Fallback de headers si la consulta a la base de datos falla.
- [ ] Test: Tooltips descriptivos en celdas de la tabla.
- [ ] Test: Alternancia de filas y selección de filas.

## 2. Exportación
- [ ] Test: Exportar a Excel con datos (flujo exitoso, archivo generado y datos correctos).
- [ ] Test: Exportar a Excel con tabla vacía (debe mostrar feedback de error).
- [ ] Test: Cancelación del diálogo de guardado (no debe generar archivo ni error).
- [ ] Test: Feedback visual de progreso (QProgressDialog) durante la exportación.
- [ ] Test: Manejo de error al intentar exportar a una ruta no válida o protegida.

## 3. Accesibilidad y feedback
- [ ] Test: Tooltips en todos los botones principales.
- [ ] Test: Feedback visual de error crítico (QMessageBox) al perder conexión.
- [ ] Test: Feedback visual de éxito tras exportar.
- [ ] Test: Feedback visual breve si la tabla es pequeña (documentar excepción).

## 4. Configuración de columnas
- [ ] Test: Mostrar/ocultar columnas y persistencia de configuración por usuario.
- [ ] Test: Fallback de configuración si el archivo JSON no existe o está corrupto.

## 5. Botones y señales
- [ ] Test: Emisión de señales de los botones principales (nuevo, exportar, buscar, QR, etc.).
- [ ] Test: Stubs de botones no implementados muestran mensaje informativo.

## 6. Robustez y errores
- [ ] Test: Robustez de acceso a atributos de conexión (helper _get_db_attr).
- [ ] Test: Feedback de error si la conexión a la base de datos es inválida.

## 7. Visuales y estilos
- [ ] Test: Headers de tabla con estilo visual estándar.
- [ ] Test: Padding y márgenes globales en layouts y diálogos.

## 8. Cobertura de excepciones visuales
- [ ] Test: Documentar y validar cualquier excepción visual nueva detectada.

# --- PENDIENTES DE TESTS AUTOMÁTICOS DETECTADOS EN REVISIÓN (2025-05-22) ---
# Revisar y agregar tests para los siguientes puntos que NO están cubiertos en los tests actuales:
- [ ] Test: Feedback visual real en InventarioView (QMessageBox, QProgressDialog, tooltips, headers visuales) usando la UI real, no solo mocks.
- [ ] Test: Exportación a Excel/PDF desde la UI real, validando feedback visual de progreso y mensajes de éxito/error.
- [ ] Test: Persistencia y fallback de configuración de columnas (archivo JSON), incluyendo casos de archivo corrupto o inexistente.
- [ ] Test: Accesibilidad real (tooltips presentes, foco visible, contraste, tamaño de fuente >=12px en todos los widgets interactivos).
- [ ] Test: Robustez ante errores de conexión en la vista (InventarioView), mostrando feedback visual y sin crashear la app.
- [ ] Test: Visualización de headers y estilos visuales en la tabla real (colores, bordes, fuente, padding).
- [ ] Test: Cobertura de excepciones visuales nuevas y su documentación automática en el código y docs/estandares_visuales.md.
# Estos puntos deben cubrirse con tests automáticos siguiendo las especificaciones robustas del checklist.

# --- PARÁMETROS Y REQUISITOS PARA TESTS AUTOMÁTICOS ROBUSTOS (INVENTARIO Y APP) ---
# Para que los tests sean robustos y cumplan con las expectativas de un programador experto, cada test debe:
#
# 1. Nombrado claro y descriptivo:
#    - test_<funcionalidad>_<condición>_<resultado_esperado>
#    - Ejemplo: test_exportar_excel_tabla_vacia_muestra_error
#
# 2. Estructura AAA (Arrange-Act-Assert):
#    - Arrange: Preparar entorno, mocks, datos y dependencias.
#    - Act: Ejecutar la acción a testear.
#    - Assert: Verificar el resultado esperado (feedback visual, datos, señales, etc).
#
# 3. Mocking y aislamiento:
#    - Simular dependencias externas (DB, archivos, señales, red, etc) para aislar el test.
#    - Usar unittest.mock, pytest-mock o fixtures según corresponda.
#
# 4. Validación de feedback visual y accesibilidad:
#    - Comprobar que QMessageBox, QLabel, QProgressDialog, tooltips y headers visuales se muestran/cambian correctamente.
#    - Verificar foco visible, contraste, tamaño de fuente >=12px, tooltips presentes y claros.
#
# 5. Edge cases y errores:
#    - Incluir casos límite: tabla vacía, error de conexión, rutas inválidas, permisos insuficientes, archivo JSON corrupto, etc.
#    - Verificar que la app no crashee y muestre feedback visual adecuado.
#
# 6. Limpieza y restauración:
#    - Restaurar estado tras cada test (archivos, configs, mocks, base de datos temporal, etc).
#    - Usar fixtures de setup/teardown o context managers.
#
# 7. Documentación y claridad:
#    - Cada test debe tener un docstring breve explicando el objetivo y el porqué del caso probado.
#    - Ejemplo:
#      def test_exportar_excel_tabla_vacia_muestra_error(self):
#          """Debe mostrar feedback de error si se intenta exportar una tabla vacía a Excel."""
#
# 8. Cobertura y exhaustividad:
#    - Asegurar que cada flujo crítico y excepción visual está cubierto.
#    - Validar señales emitidas, feedback visual, persistencia de configuración, accesibilidad y robustez.
#
# 9. Independencia de datos reales:
#    - Usar datos simulados o temporales, nunca depender de datos reales o productivos.
#
# 10. Validar señales y side effects:
#     - Comprobar que las señales se emiten correctamente y sólo cuando corresponde.
#     - Verificar side effects en la UI y en la base de datos simulada.
#
# 11. Visuales y estilos:
#     - Verificar estilos, tooltips y headers visuales según docs/estandares_visuales.md.
#     - Validar que no haya overrides locales no justificados.
#
# 12. Accesibilidad:
#     - Verificar tooltips y feedback accesible en todos los widgets interactivos.
#     - Validar foco visible y contraste suficiente.
#
# 13. Limpieza de recursos:
#     - Cerrar archivos, eliminar temporales y restaurar mocks tras cada test.
#
# 14. Ejemplo de test robusto:
#     def test_exportar_excel_tabla_vacia_muestra_error(self):
#         """Debe mostrar feedback de error si se intenta exportar una tabla vacía a Excel."""
#         # Arrange
#         ...
#         # Act
#         ...
#         # Assert
#         ...
#
# Para cada test del checklist, seguir estos parámetros y actualizar el estado en este archivo.
# Si un test no cumple con estos puntos, debe ser refactorizado o ampliado.
#
# Documentar en el código y en docs/estandares_visuales.md cualquier excepción visual o lógica detectada durante los tests.
#
# --- FIN DE PARÁMETROS OBLIGATORIOS PARA TESTS ROBUSTOS ---

# Especificaciones para tests automáticos robustos (inventario)
# ------------------------------------------------------------
# Cada test debe cumplir con las siguientes buenas prácticas:
#
# 1. Nombrado claro: test_<funcionalidad>_<condición>_<resultado_esperado>
# 2. Arrange-Act-Assert: Separar claramente preparación, ejecución y verificación.
# 3. Mocking: Simular dependencias externas (DB, archivos, señales) para aislar el test.
# 4. Validar feedback visual: Comprobar que QMessageBox, QLabel, QProgressDialog y tooltips se muestran/cambian correctamente.
# 5. Edge cases: Incluir casos límite (tabla vacía, error de conexión, rutas inválidas, permisos insuficientes, etc).
# 6. Limpieza: Restaurar estado tras cada test (archivos, configs, mocks).
# 7. Documentar: Cada test debe tener docstring breve explicando el objetivo y el porqué del caso probado.
# 8. Cobertura: Asegurar que cada flujo crítico y excepción visual está cubierto.
# 9. No depender de datos reales: Usar datos simulados o temporales.
# 10. Validar señales: Comprobar que las señales se emiten correctamente y sólo cuando corresponde.
# 11. Visuales: Verificar estilos, tooltips y headers visuales según docs/estandares_visuales.md.
# 12. Accesibilidad: Verificar tooltips y feedback accesible en todos los widgets interactivos.
#
# Ejemplo de docstring para un test robusto:
# def test_exportar_excel_tabla_vacia_muestra_error(self):
#     """Debe mostrar feedback de error si se intenta exportar una tabla vacía a Excel."""
#
# Para cada test del checklist, seguir estas especificaciones y actualizar el estado en este archivo.

---
# Nota
- Actualizar este checklist a medida que se implementen los tests.
- Documentar en el código y en docs/estandares_visuales.md cualquier excepción visual o lógica detectada durante los tests.

- [ ] NOTA: Los tests automáticos de UI (PyQt) no se ejecutan en el entorno actual (Windows/PowerShell) ni siquiera con test dummy. Ver `docs/bloqueo_tests_ui.md` para diagnóstico y próximos pasos sugeridos.

Cuando inicio la app no se inicia primero la pantalla de carga, y la animacion de la misma no funciona. El usuario no puede ver que esta cargando. Luego esta pantalla de carga no se cierra sola cuando se abre la pantalla principal.
