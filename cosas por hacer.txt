# --- COSAS POR HACER (actualizado 2025-05-25) ---
# Checklist exhaustivo de pendientes, mejoras y robustez por módulo, alineado con los estándares de docs/ y README.md.
# Mantener este archivo actualizado tras cada avance, corrección o excepción documentada.

====================
PRIORIDAD CRÍTICA (debe resolverse antes de producción)
====================

## 1. USUARIOS
- [x] Validar robustez de login y feedback visual ante errores de clave, usuario o permisos. (Tests robustos agregados: feedback visual, edge cases, accesibilidad, permisos)
- [x] Mejoras de accesibilidad y feedback visual implementadas en login_view.py (25/05/2025):
    - Tooltips, foco visible, contraste, accesibleName/Description, feedback con emoji y color.
    - Cumple docs/estandares_visuales.md y docs/estandares_feedback.md.
    - Documentado en el código y checklist.
- [x] Integración de permisos en sidebar y main_window validada (25/05/2025):
    - Solo los módulos permitidos son visibles y accesibles.
    - Sidebar y stack filtran vistas según permisos.
    - Mensaje de “Permiso denegado” si se intenta acceder a un módulo no permitido.
    - Cumple docs/estandares_visuales.md y docs/estandares_seguridad.md.
- [x] Validar y documentar que la función crear_usuarios_iniciales asigne permisos correctos (admin: todos, prueba: mínimos) y que el flujo esté documentado en el código y checklist. (Ver docstring en modules/usuarios/model.py y scripts/validar_permisos_iniciales.py)
- [x] Script de validación de permisos iniciales (scripts/validar_permisos_iniciales.py) documentado y funcional: permite auditar permisos de admin/prueba en cualquier entorno multi-PC/IP, usando configuración centralizada y sin exponer credenciales. Referencia obligatoria para QA y administración.
- [ ] Robustecer tests de login, permisos y feedback visual.

## 2. CONFIGURACIÓN
- [ ] Refactorizar inicialización y conexión de señales en el controller.
- [ ] Validar argumentos y tipos en todos los métodos públicos.
- [ ] Mejorar feedback visual y mensajes de error en la vista.
- [ ] Tests unitarios y de integración para controller y modelo.

## 3. INVENTARIO
- [ ] Validar modelo y vista: feedback visual, robustez de queries y manejo de errores.
- [ ] Integración con pedidos y obras: reflejar cambios en tiempo real.
- [ ] Tests: robustecer tests de integración y UI.

## 4. OBRAS
- [ ] Validar modelo y vista: feedback visual, robustez de queries y manejo de errores.
- [ ] Integración con inventario y vidrios.
- [ ] Tests: robustecer tests de integración y UI.
- [ ] Validar edge cases en vista/controller (campos vacíos, errores de conexión, etc).

## 5. PEDIDOS
- [ ] Completar implementación de modelo y controlador.
- [ ] Validar integración con inventario y obras.
- [ ] Tests: robustecer tests de integración y UI.

## 6. VIDRIOS
- [ ] Completar implementación de modelo y controlador.
- [ ] Validar integración con obras.
- [ ] Tests: robustecer tests de integración y UI.

## 7. AUDITORÍA Y LOGS
- [ ] Validar que todas las acciones sensibles se registren correctamente.
- [ ] Mejorar feedback visual y trazabilidad de errores.
- [ ] Tests: robustecer tests de integración y cobertura de logs.

## 8. INTEGRACIÓN GENERAL Y FEEDBACK VISUAL
- [ ] Validar que sidebar y main_window reflejen correctamente permisos y módulos disponibles.
- [ ] Mejorar feedback visual y accesibilidad en todos los módulos.

## 9. SCRIPTS DE INSTALACIÓN Y DEPENDENCIAS
- [ ] Validar robustez de scripts y feedback de errores.
- [ ] Documentar advertencias y recomendaciones de seguridad.

## 10. TESTS DE INTEGRACIÓN Y UI
- [ ] Completar y robustecer tests de integración y UI para todos los módulos principales.
- [ ] Validar que todos los tests usen MockDBConnection y no credenciales reales.

====================
PRIORIDAD MEDIA Y MEJORAS TRANSVERSALES
====================

- [ ] Mejorar el SplashScreen: solo debe desaparecer cuando la interfaz principal esté lista.
- [ ] Agregar indicadores visuales de progreso en procesos largos (carga masiva, actualización de stock).
- [ ] Soporte para adjuntar archivos o imágenes a obras y pedidos.
- [ ] Integrar notificaciones push o alertas para avisos críticos.
- [ ] Optimizar carga y paginación de tablas para grandes volúmenes.
- [ ] Permitir personalización de columnas y filtros en tablas según usuario.
- [ ] Incluir accesos rápidos (botones o atajos) para acciones frecuentes.
- [ ] Mejorar accesibilidad: navegación por teclado, lectores de pantalla, contraste alto y foco visible.
- [ ] Documentar y soportar flujos alternativos (devolución de material, reasignación de vidrios, cierre anticipado de obra).
- [ ] Proveer dashboard/resumen visual con KPIs y reportes automáticos.
- [ ] Permitir comentarios u observaciones en cada pedido para trazabilidad.
- [ ] Validaciones visuales (colores, íconos) para advertir si el stock es insuficiente antes de guardar el pedido.
- [ ] Mejorar navegación entre obras y pedidos (ir de un pedido a la obra asociada y viceversa).
- [ ] Revisar experiencia de usuario y rendimiento en flujos con muchas obras o pedidos simultáneos.

====================
CHECKLIST DE TESTS AUTOMÁTICOS Y EDGE CASES (por módulo)
====================

- [ ] Test: Al agregar una obra, se refleja automáticamente en la tabla de obras y en los módulos de Inventario y Vidrios (sin recargar la app).
- [ ] Test: Al solicitar material desde una obra, se muestra correctamente la cantidad solicitada, stock disponible y cantidad faltante.
- [ ] Test: Al guardar un pedido de material, se visualiza el resumen con fecha y usuario, y se puede filtrar/buscar por obra, fecha, usuario o estado.
- [ ] Test: El estado de cada ítem de pedido se muestra correctamente (entregado, pendiente, en espera de compra, etc).
- [ ] Test: Edición y cancelación de pedidos antes de ser procesados, con registro de cambios en la auditoría.
- [ ] Test: Confirmaciones visuales (diálogos modales) antes de eliminar o modificar pedidos.
- [ ] Test: Indicadores visuales de progreso en procesos largos.
- [ ] Test: Adjuntar archivos o imágenes a obras y pedidos y visualizarlos correctamente.
- [ ] Test: Notificaciones push o alertas ante pedidos pendientes, materiales recibidos o cambios de estado.
- [ ] Test: Carga y paginación eficiente de tablas con grandes volúmenes de datos.
- [ ] Test: Personalización de columnas y filtros en tablas según usuario.
- [ ] Test: Accesos rápidos (botones o atajos) para acciones frecuentes.
- [ ] Test: Accesibilidad: navegación por teclado, lectores de pantalla, contraste alto y foco visible.
- [ ] Test: Flujos alternativos (devolución de material, reasignación de vidrios, cierre anticipado de obra).
- [ ] Test: Dashboard/resumen visual con KPIs y reportes automáticos.
- [ ] Test: Exportación de historial de pedidos a Excel/PDF.
- [ ] Test: Comentarios u observaciones en pedidos y su trazabilidad.
- [ ] Test: Notificación visual/email cuando el material esté disponible o el pedido procesado.
- [ ] Test: Validaciones visuales (colores, íconos) para advertir si el stock es insuficiente antes de guardar el pedido.
- [ ] Test: Navegación entre obras y pedidos (de un pedido a la obra asociada y viceversa).
- [ ] Test: Registro en la auditoría de todas las acciones relevantes (alta, edición, entrega, cancelación) con fecha, usuario y detalle.
- [ ] Test: Edge cases: obra sin stock, pedido parcial, error de conexión, permisos insuficientes, etc.
- [ ] Test: Experiencia de usuario y rendimiento en flujos con muchas obras o pedidos simultáneos.

====================
LAYOUTS Y UX POR MÓDULO (estándar visual obligatorio)
====================
- [ ] InventarioView: barra de botones principal alineada horizontalmente (QHBoxLayout), espaciado 16px, a la derecha.
- [ ] ObrasView: barra de botones de acciones principales unificada en QHBoxLayout, alineados horizontalmente, espaciado 16px.
- [ ] VidriosView: botones principales en QHBoxLayout, alineados horizontalmente, espaciado 16px.
- [ ] PedidosView: botones de acción en QHBoxLayout, alineados horizontalmente, espaciado 16px.
- [ ] ComprasPedidosView: todos los botones de acción en QHBoxLayout, alineados horizontalmente, espaciado 16px.
- [ ] LogisticaView: botones principales en cada pestaña en QHBoxLayout, alineados horizontalmente, espaciado 16px.
- [ ] HerrajesView y MaterialesView: botones principales en QHBoxLayout, alineados horizontalmente, espaciado 16px.
- [ ] UsuariosView: botones de acción en QHBoxLayout, alineados horizontalmente, espaciado 16px.
- [ ] ConfiguracionView: botones de acción en QHBoxLayout, alineados horizontalmente, espaciado 16px.
- [ ] ContabilidadView: diálogos y vistas con botones de acción alineados horizontalmente, espaciado 16px.
- [ ] MantenimientoView: botones de acción en QHBoxLayout, alineados horizontalmente, espaciado 16px.
- [ ] Sidebar: botones con espaciado vertical 8px, padding 10px horizontal.

# Notas generales:
# - Todos los botones principales deben ser solo ícono, salvo justificación documentada.
# - Usar siempre el helper estilizar_boton_icono para tamaño, color y sombra uniforme.
# - Si algún módulo requiere una excepción (botón con texto, disposición vertical, etc.), debe documentarse en el código y en docs/estandares_visuales.md.
# - Verificar que todos los layouts principales usen QVBoxLayout con setContentsMargins(24, 20, 24, 20) y setSpacing(16).

====================
SEGURIDAD Y AUDITORÍA (checklist obligatorio)
====================
- [ ] No mostrar mensajes de error detallados al usuario final.
- [ ] No loggear contraseñas ni datos sensibles.
- [ ] Usar hash seguro para contraseñas.
- [ ] Validar feedback visual y de error en producción.
- [ ] No dejar usuarios de prueba o contraseñas por defecto en producción.
- [ ] No exponer estructura de la base de datos ni scripts sensibles en repositorios públicos.
- [ ] Usar roles y permisos mínimos necesarios para las cuentas de conexión.
- [ ] Proteger archivos de logs con permisos adecuados.
- [ ] Documentar y auditar todas las acciones críticas en logs de usuario.
- [ ] No mostrar trazas de error ni detalles internos al usuario final.
- [ ] Documentar cualquier excepción visual o lógica en los archivos de estándares.
- [ ] Validar que la tabla permisos_modulos exista y esté documentada en instalaciones nuevas.

====================
DOCUMENTACIÓN Y EXCEPCIONES
====================
- [ ] Documentar toda excepción visual, lógica o de permisos en el código y en docs/estandares_visuales.md, estandares_seguridad.md o errores_frecuentes_login.md.
- [ ] Actualizar este checklist y los docs tras cada avance, corrección o excepción.
- [ ] Robustecer y documentar feedback visual y accesibilidad en módulos críticos:
    - Herrajes: feedback visual centralizado y accesible en la vista, decoradores de permisos en el controlador.
    - Inventario: refuerzo de accesibilidad en formularios y feedback visual en errores.
    - Logística: feedback visual inmediato y refuerzo de accesibilidad en la vista.
    - Mantenimiento: feedback visual y accesibilidad en botones principales.
    - Notificaciones: feedback visual y accesibilidad en la vista.
    - Obras y Producción: feedback visual centralizado, accesibilidad en botones y tablas.
    - Pedidos: feedback visual y refuerzo de accesibilidad.
    - Vidrios: feedback visual y accesibilidad en la vista.
- [ ] Priorizar módulos según criticidad y visibilidad en la app (Inventario, Obras, Logística, Herrajes, Mantenimiento, Pedidos, Notificaciones, Vidrios).